---
- hosts: all 
  become: true
  tasks:

#Docker
    - name: Docker - Deb - Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
      when: ansible_facts['os_family'] == "Debian" and
            inventory_hostname in groups['app']

    - name: Docker - RH - Install yum utils
      yum:
        name: yum-utils
        state: latest
      when: ansible_facts['os_family'] == "RedHat" and
            inventory_hostname in groups['app']

    - name: Docker - Deb - Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true
      when: ansible_facts['os_family'] == "Debian" and
            inventory_hostname in groups['app']

    - name: Docker - RH - Install device-mapper-persistent-data
      yum:
        name: device-mapper-persistent-data
        state: latest
      when: ansible_facts['os_family'] == "RedHat" and
            inventory_hostname in groups['app']

    - name: Docker - RH - Install lvm2
      yum:
        name: lvm2
        state: latest
      when: ansible_facts['os_family'] == "RedHat" and
            inventory_hostname in groups['app']

    - name: Docker - Deb - Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_facts['os_family'] == "Debian" and
            inventory_hostname in groups['app']

    - name: Docker - Deb - Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      when: ansible_facts['os_family'] == "Debian" and
            inventory_hostname in groups['app']

    - name: Docker - RH - Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_facts['os_family'] == "RedHat" and
            inventory_hostname in groups['app']

    - name: Docker - Deb - Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
      when: ansible_facts['os_family'] == "Debian" and
            inventory_hostname in groups['app']

    - name: Docker - RH - Install Docker
      package:
        name: docker-ce
        state: latest
      when: ansible_facts['os_family'] == "RedHat" and
            inventory_hostname in groups['app']

    - name: Docker - Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      when: inventory_hostname in groups['app']

# Postgre-sql
    - name: Postgres - Install required packages
      apt:
        name:
          - wget
          - python3-psycopg2
          - acl
      when: inventory_hostname in groups['database']

    - name: Postgres - Install postgresql
      apt:
        name: "{{ pgver }}"
        update_cache: yes
      when: inventory_hostname in groups['database']

    - name: Postgres - Ensure PostgreSQL is listening on *
      lineinfile:
        dest: "{{ pgpath }}postgresql.conf"
        regexp: '^listen_addresses\s*='
        line: "listen_addresses='*'"
        state: present
      notify: Restart Postgresql
      when: inventory_hostname in groups['database']

    - name: Postgres - Add new configuration to "pg_hba.conf"
      blockinfile:
        dest: "{{ pgpath }}pg_hba.conf"
        block: |
          host    all             all             0.0.0.0/0                md5
          host    all             all             ::/0                     md5
      notify: Restart Postgresql
      when: inventory_hostname in groups['database']

    - name: Postgres - Change peer identification to trust
      shell: /bin/sed -i '/^local/s/peer/trust/' {{ pgpath }}pg_hba.conf
      args:
        warn: no
      notify: Restart Postgresql
      when: inventory_hostname in groups['database']
      

    - name: Postgres - Create a Superuser PostgreSQL database user
      become: yes
      become_user: postgres
      postgresql_user:
        name: '{{ postgres_root_user }}'
        password: '{{ postgres_root_pass }}'
        role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
        encrypted: yes
        state: present
      when: inventory_hostname in groups['database']


  handlers:
    - name: Restart Postgresql
      systemd:
        name: postgresql
        state: restarted
          

